RFC 1459

2.3 MESSAGES
 ':' prefix ' ' command ' ' command parameters (up to 15 separated by ' ')
-Clients should not use prefix when sending a message from themselves; if they use a prefix, the only valid prefix is theregistered nickname associated with the client
-if the source in the prefix cannot be found, server ignores silently
-Command: must either be a valid IRC command or a three (3) digit number represented in ASCII text

-IRC messages are always lines of characters terminated with a CR-LF (Carriage Return - Line Feed) pair
-these messages shall not exceed 512 characters in length, counting all characters including the trailing CR-LF
-thus, 510 characters maximum allowed for the command and its parameters

2.3.1 MESSAGE FORMAT IN PSEUDO BNF
-The extracted message is parsed into the components <prefix>, <command> and list of parameters matched either by <middle> or <trailing> components
-The BNF representation for this is:

<message>  ::= [':' <prefix> <SPACE> ] <command> <params> <crlf>
<prefix>   ::= <servername> | <nick> [ '!' <user> ] [ '@' <host> ]
<command>  ::= <letter> { <letter> } | <number> <number> <number>
<SPACE>    ::= ' ' { ' ' }
<params>   ::= <SPACE> [ ':' <trailing> | <middle> <params> ]

<middle>   ::= <Any *non-empty* sequence of octets not including SPACE
               or NUL or CR or LF, the first of which may not be ':'>
<trailing> ::= <Any, possibly *empty*, sequence of octets not including
                 NUL or CR or LF>

<crlf>     ::= CR LF

-The NUL character is not special in message framing, and basically could end up inside a parameter, but as it would cause extra complexities in normal C string handling. Therefore NUL is not allowed within messages
-Use of the extended prefix (['!' <user> ] ['@' <host> ]) must not be used in server to server communications and is only intended for server to client messages in order to provide clients with more useful information about who a message is from without the need for additional queries

2.4 NUMERIC REPLIES
-Most of the messages sent to the server generate a reply of some sort.  The most common reply is the numeric reply, used for both errors and normal replies
-A numeric reply is not allowed to originate from a client; any such messages received by a server are silently dropped

5.1 CONNECTION LIVELINESS
-To detect when a connection has died or become unresponsive, the server MUST poll each of its connections
-The PING command (See "IRC Client Protocol" [IRC-CLIENT]) is used if the server doesn't get a response from its peer in a given amount of time.
-If a connection doesn't respond in time, its connection is closed using the appropriate procedures

3.7.2 PING MESSAGE // changes between protocols
-Servers send a PING message at regular intervals if no other activity detected coming from a connection
-If a connection fails to respond to a PING message within a set amount of time, that connection is closed
-MAY be sent even if the connection is active
-Numeric Replies: ERR_NOORIGIN, ERR_NOSUCHSERVER

1.3 CHANNELS
-To create a new channel or become part of an existing channel, a user is required to JOIN the channel.  If the channel doesn't exist prior to joining, the channel is created and the creating user becomes a channel operator
-the channel ceases to exist when the last client leaves it

2.1
-Channels names are strings (beginning with a '&', '#', '+' or '!' character) of length up to fifty (50) characters.  Channel names are case insensitive
-Channels with '+' as prefix do not support channel modes.  This means that all the modes are unset, with the exception of the 't' channel flag which is set.

2.4.1 OPERATORS
-Channel operators are identified by the '@' symbol next to their nickname whenever it is associated with a channel (i.e., replies to the NAMES, WHO and WHOIS commands).
-Since channels starting with the character '+' as prefix do not support channel modes, no member can therefore have the status of channel operator

3.1 STANDARD CHANNELS ('&', '#' or '+')
-The user creating a channel automatically becomes channel operator with the notable exception of channels which name is prefixed by the character '+'

4. CHANNEL MODES
-i - toggle the invite-only channel flag;
-t - toggle the topic settable by channel operator only flag;
-k - set/remove the channel key (password);
-o - give/take channel operator privilege;
-l - set/remove the user limit to channel;
- (!) When using the 'o' and 'b' options, a restriction on a total of three per mode command has been imposed.

4.2.2. INVITE ONLY FLAG
-When the channel flag 'i' is set, new members are only accepted if their mask matches Invite-list (See section 4.3.2) or they have been invited by a channel operator. 
-This flag also restricts the usage of the INVITE command (See "IRC Client Protocol" [IRC-CLIENT]) to channel operators.
-For channels which have the invite-only flag set (See Section 4.2.2 (Invite Only Flag)), users whose address matches an invitation mask set for the channel are allowed to join the channel without any invitation (4.3.2)

4.2.8. TOPIC
The channel flag 't' is used to restrict the usage of the TOPIC command to channel operators

4.2.9. USER LIMIT
-A user limit may be set on channels by using the channel flag 'l'. When the limit is reached, servers MUST forbid their local users to join the channel.
-The value of the limit MUST only be made available to the channel members in the reply sent by the server to a MODE query.

4.2.10. CHANNEL KEY
-When a channel key is set (by using the mode 'k'), servers MUST reject their local users request to join the channel unless this key is given.
-The channel key MUST only be made visible to the channel members in the reply sent by the server to a MODE query.

(IRC1459)

4.2.1. JOIN MESSAGE
-Once a user has joined a channel, they receive notice about all commands their server receives which affect the channel.  This includes MODE, KICK, PART, QUIT and of course PRIVMSG/NOTICE

4.2.5. NAMES
-By using the NAMES command, a user can list all nicknames that are visible to them on any channel that they can see.
-The <channel> parameter specifies which channel(s) to return information about if valid. There is no error reply for bad channel names
-If no <channel> parameter is given, a list of all channels and their occupants is returned.  At the end of this list, a list of users who are visible but either not on any channel or not on a visible channel are listed as being on `channel' "*"
-When you implement modes, nicks with channel operator privileges on a channel must have their nick prefixed by @ in the RPL_NAMREPLY reply. Similarly, nicks with “voice” privileges must have their nick prefixed by + [uchicago]

4.2.7. INVITE MESSAGE
-To invite a user to a channel which is invite only (MOD +i), the client sending the invite must be recognised as being channel operator on the given channel
-Other channel members SHOULD NOT be notified [horse]
-The invited user can then choose to join the channel by sending a JOIN command [chatGPT]
	   ERR_NEEDMOREPARAMS              ERR_NOSUCHNICK*
           ERR_NOTONCHANNEL                ERR_USERONCHANNEL
           ERR_CHANOPRIVSNEEDED
           RPL_INVITING                    RPL_AWAY

4.2.3. MODE MESSAGE
-It allows bot usernames and channels to have their mode changed
CHANNEL MODES
Parameters: <channel> {[+|-]|o|p|s|i|t|n|b|v} [<limit>] [<user>]
               [<ban mask>]
-When using the 'o' and 'b' options, a restriction on a total of three per mode command has been imposed.  That is, any combination of 'o' (and other 2)
USER MODES
Parameters: <nickname> {[+|-]|i|w|s|o}
-NOT required by the subject [irc subject]

4.2.2 INVITE ONLY
-new members are only accepted if their mask matches Invite-list (See section 4.3.2) or they have been invited by a channel operator
-This flag also restricts the usage of the INVITE command (See "IRC Client Protocol" [IRC-CLIENT]) to channel operators
-If this mode is set on a channel, a user must have received an INVITE for this channel before being allowed to join it. If they have not received an invite, they will receive an ERR_INVITEONLYCHAN (473) reply and the command will fail. [horse]
-If this mode is set on a channel, and a client sends a JOIN request for that channel, they must supply <key> in order for the command to succeed. If they do not supply a <key>, or the key they supply does not match the value of this mode, they will receive an ERR_BADCHANNELKEY (475) reply and the command will fail ! [horse]

PRIVMSG
Parameters: <receiver>{,<receiver>} <text to be sent>
-When the PRIVMSG message is sent from a server to a client and <target> starts with a dollar character ('$', 0x24), the message is a broadcast sent to all clients on one or multiple servers. [horse]
-If <target> is a user and that user has been set as away, the server may reply with an RPL_AWAY (301) numeric and the command will continue. [horse]

2.3.1 Message format in Augmented BNF

   The protocol messages must be extracted from the contiguous stream of
   octets.  The current solution is to designate two characters, CR and
   LF, as message separators.  Empty messages are silently ignored,
   which permits use of the sequence CR-LF between messages without
   extra problems.

   The extracted message is parsed into the components <prefix>,
   <command> and list of parameters (<params>).

    The Augmented BNF representation for this is:

    message    =  [ ":" prefix SPACE ] command [ params ] crlf
    prefix     =  servername / ( nickname [ [ "!" user ] "@" host ] )
    command    =  1*letter / 3digit
    params     =  *14( SPACE middle ) [ SPACE ":" trailing ]
               =/ 14( SPACE middle ) [ SPACE [ ":" ] trailing ]

    nospcrlfcl =  %x01-09 / %x0B-0C / %x0E-1F / %x21-39 / %x3B-FF
                    ; any octet except NUL, CR, LF, " " and ":"
    middle     =  nospcrlfcl *( ":" / nospcrlfcl )
    trailing   =  *( ":" / " " / nospcrlfcl )

    SPACE      =  %x20        ; space character
    crlf       =  %x0D %x0A   ; "carriage return" "linefeed"

   NOTES:
      1) After extracting the parameter list, all parameters are equal
         whether matched by <middle> or <trailing>. <trailing> is just a
         syntactic trick to allow SPACE within the parameter.

      2) The NUL (%x00) character is not special in message framing, and
         basically could end up inside a parameter, but it would cause
         extra complexities in normal C string handling. Therefore, NUL
         is not allowed within messages.

   Most protocol messages specify additional semantics and syntax for
   the extracted parameter strings dictated by their position in the
   list.  For example, many server commands will assume that the first
   parameter after the command is the list of targets, which can be
   described with:

  target     =  nickname / server
  msgtarget  =  msgto *( "," msgto )
  msgto      =  channel / ( user [ "%" host ] "@" servername )
  msgto      =/ ( user "%" host ) / targetmask
  msgto      =/ nickname / ( nickname "!" user "@" host )
  channel    =  ( "#" / "+" / ( "!" channelid ) / "&" ) chanstring
                [ ":" chanstring ]
   /* for FT_IRC:
   	channel    =  ( "#" ) chanstring
                [ ":" chanstring ]
   */
  servername =  hostname
  host       =  hostname / hostaddr
  hostname   =  shortname *( "." shortname )
  shortname  =  ( letter / digit ) *( letter / digit / "-" )
                *( letter / digit )
                  ; as specified in RFC 1123 [HNAME]
  hostaddr   =  ip4addr / ip6addr
  ip4addr    =  1*3digit "." 1*3digit "." 1*3digit "." 1*3digit
  ip6addr    =  1*hexdigit 7( ":" 1*hexdigit )
  ip6addr    =/ "0:0:0:0:0:" ( "0" / "FFFF" ) ":" ip4addr
  nickname   =  ( letter / special ) *8( letter / digit / special / "-" )
  targetmask =  ( "$" / "#" ) mask
                  ; see details on allowed masks in section 3.3.1
  chanstring =  %x01-07 / %x08-09 / %x0B-0C / %x0E-1F / %x21-2B
  chanstring =/ %x2D-39 / %x3B-FF
                  ; any octet except NUL, BELL, CR, LF, " ", "," and ":"
  channelid  = 5( %x41-5A / digit )   ; 5( A-Z / 0-9 )

  Other parameter syntaxes are:

  user       =  1*( %x01-09 / %x0B-0C / %x0E-1F / %x21-3F / %x41-FF )
                  ; any octet except NUL, CR, LF, " " and "@"
  key        =  1*23( %x01-05 / %x07-08 / %x0C / %x0E-1F / %x21-7F )
                  ; any 7-bit US_ASCII character,
                  ; except NUL, CR, LF, FF, h/v TABs, and " "
  letter     =  %x41-5A / %x61-7A       ; A-Z / a-z
  digit      =  %x30-39                 ; 0-9
  hexdigit   =  digit / "A" / "B" / "C" / "D" / "E" / "F"
  special    =  %x5B-60 / %x7B-7D
                   ; "[", "]", "\", "`", "_", "^", "{", "|", "}"

  NOTES:
      1) The <hostaddr> syntax is given here for the sole purpose of
         indicating the format to follow for IP addresses.  This
         reflects the fact that the only available implementations of
         this protocol uses TCP/IP as underlying network protocol but is
         not meant to prevent other protocols to be used.

      2) <hostname> has a maximum length of 63 characters.  This is a
         limitation of the protocol as internet hostnames (in
         particular) can be longer.  Such restriction is necessary
         because IRC messages are limited to 512 characters in length.
         Clients connecting from a host which name is longer than 63
         characters are registered using the host (numeric) address
         instead of the host name.

      3) Some parameters used in the following sections of this
         documents are not defined here as there is nothing specific
         about them besides the name that is used for convenience.
         These parameters follow the general syntax defined for
         <params>.

2.4 NUMERIC REPLIES (RFC2812)
-The numeric reply MUST be sent as one message consisting of the sender prefix, the three-digit numeric, and the target of the reply.  A numeric reply is not allowed to originate from a client.
-A numeric reply is just like a normal message, except that the keyword is made up of 3 numeric digits rather than a string of letters

3.1 Connection Registration

   The commands described here are used to register a connection with an
   IRC server as a user as well as to correctly disconnect.

   A "PASS" command is not required for a client connection to be
   registered, but it MUST precede the latter of the NICK/USER
   combination (for a user connection) or the SERVICE command (for a
   service connection). The RECOMMENDED order for a client to register
   is as follows:

                           1. Pass message
           2. Nick message                 2. Service message
           3. User message

   Upon success, the client will receive an RPL_WELCOME (for users) or
   RPL_YOURESERVICE (for services) message indicating that the
   connection is now registered and known the to the entire IRC network.
   The reply message MUST contain the full client identifier upon which
   it was registered.

5.2 Accepting a client to server connection (RFC2813)

5.2.1 Users

-When a server successfully registers a new user connection, it is REQUIRED to send to the user unambiguous messages stating: the user identifiers upon which it was registered (RPL_WELCOME), the server name and version (RPL_YOURHOST), the server birth information (RPL_CREATED), available user and channel modes (RPL_MYINFO), and it MAY send any introductory messages which may be deemed appropriate.
-In particular the server SHALL send the current user/service/server count (as per the LUSER reply) and finally the MOTD (if any, as per the MOTD reply).
-NOTE: RPL_ISUPPORT not included, as in the horse (in the horse is 005, on RFC cannot find)...


-In processing an LUSERS message, the server sends a set of replies from RPL_LUSERCLIENT, RPL_LUSEROP, RPL_USERUNKNOWN, RPL_LUSERCHANNELS and RPL_LUSERME.  When replying, a server MUST send back RPL_LUSERCLIENT and RPL_LUSERME.  The other replies are only sent back if a non-zero count is found for them.

3.2.8 Kick command

      Command: KICK
   Parameters: <channel> *( "," <channel> ) <user> *( "," <user> )
               [<comment>]
-The KICK command can be used to request the forced removal of a user from a channel.  It causes the <user> to PART from the <channel> by force.  For the message to be syntactically correct, there MUST be either one channel parameter and multiple user parameter, or as many channel parameters as there are user parameters.  If a "comment" is given, this will be sent instead of the default message, the nickname of the user issuing the KICK.

TARGMAX Parameter (horse)

  Format: TARGMAX=[<command>:[limit]{,<command>:[limit]}]

Certain client commands MAY contain multiple targets, delimited by a comma (',', 0x2C). The TARGMAX parameter defines the maximum number of targets allowed for commands which accept multiple targets. If this parameter is not advertised or a value is not sent then a client SHOULD assume that no commands except the JOIN and PART commands accept multiple parameters.

QUIT message (horse)
-If a client connection is closed without the client issuing a QUIT command to the server, the server MUST distribute a QUIT message to other clients informing them of this, distributed in the same was an ordinary QUIT message. Servers MUST fill <reason> with a message reflecting the nature of the event which caused it to happen. For instance, "Ping timeout: 120 seconds", "Excess Flood", and "Too many connections from this IP" are examples of relevant reasons for closing or for a connection with a client to have been closed.

